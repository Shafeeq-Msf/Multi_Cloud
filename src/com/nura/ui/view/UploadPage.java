/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nura.ui.view;

import com.dropbox.core.DbxException;
import com.dropbox.core.v2.files.UploadErrorException;
import com.google.api.services.drive.Drive;
import com.nura.cloud.GoogleDriveAccess;
import com.nura.security.hashing.SHA256;
import com.nura.db.access.UserDetailsAccess;
import com.nura.db.entity.FileDetails;
import com.nura.db.entity.HashDetails;
import com.nura.db.entity.UserDetails;
import com.nura.db.persist.PersistFileDetails;
import com.nura.db.persist.PersistHashDtls;
import com.nura.dropbox.AuthenticateUser;
import com.nura.filehandling.ChunkingFile;
import com.nura.filehandling.FileBrowser;
import googleauthenticate.GetGoogleDriveService;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logger.LoggerUtil;

/**
 *
 * @author Arun Kumar
 */
public class UploadPage extends javax.swing.JFrame {

    /**
     * Creates new form UploadPage
     */
    private File fileSelected;
    private static final LoggerUtil log = new LoggerUtil();
    private FileDetails fileDtls = new FileDetails();
    private String userName;

    public UploadPage() {
    }

    public UploadPage(String userName) {
        initComponents();
        this.userName = userName;
        owner_tf.setText(userName);
        owner_tf.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        owner_tf = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fileSelected_TF = new javax.swing.JTextField();
        upload_bt = new javax.swing.JButton();
        exit_bt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("User Name:-");

        owner_tf.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        browse.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("File:-");

        fileSelected_TF.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        upload_bt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        upload_bt.setText("Upload");
        upload_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_btActionPerformed(evt);
            }
        });

        exit_bt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        exit_bt.setText("Exit");
        exit_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_btActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Mode:-");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(constants.Constants.MODE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(upload_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(exit_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileSelected_TF, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(owner_tf)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(owner_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSelected_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upload_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        this.fileSelected = FileBrowser.selectFile();
        fileSelected_TF.setText("" + fileSelected.getName());
        log.addLog("File selected in upload page is=>" + fileSelected_TF.getText());
    }//GEN-LAST:event_browseActionPerformed

    private void exit_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_btActionPerformed
        // TODO add your handling code here:
        dispose();
        log.addLog("Calling the login page from Upload menu");
        new UserLogin().main();
    }//GEN-LAST:event_exit_btActionPerformed

    private void upload_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_btActionPerformed
        // TODO add your handling code here:
        log.addLog("Uploading the file in the cloud");
        if(jComboBox1.getSelectedItem().equals(constants.Constants.MODE[0])){
           FileOutputStream fos1 = null;
        FileOutputStream fos2 = null;
        FileOutputStream fos3 = null;
        FileOutputStream fos4 = null;
        FileOutputStream fos5 = null;

        FileOutputStream rfos1 = null;
        FileOutputStream rfos2 = null;
        FileOutputStream rfos3 = null;
        FileOutputStream rfos4 = null;
        FileOutputStream rfos5 = null;
        
        int fileZize = (int) this.fileSelected.length();
        
        try {

            String[] getContents = new ChunkingFile().chunkFileParts(this.fileSelected);
            log.addLog("File Contents");
            log.addLog(getContents[0]);
            //Uploading file
            File recFile = new File(this.fileSelected.getAbsolutePath());
            //Move file to the temp location
            FileInputStream movStream = new FileInputStream(recFile);
            FileOutputStream movFosStream = new FileOutputStream(constants.Constants.FILE_LOCATION + recFile.getName());
            try {
                byte[] tempByteMove = new byte[movStream.available()];
                movStream.read(tempByteMove);
                movStream.close();
                movFosStream.write(tempByteMove);
                movFosStream.flush();
                movFosStream.close();
                System.out.println("File moved successfully to temporary location");

            } catch (IOException ex) {
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }

            File f1 = new File(constants.Constants.FILE_LOCATION + recFile.getName());

            
            System.out.println("File size=>" + fileZize);

            fileDtls.setFileSize(fileZize);
            fileDtls.setPart1(Integer.parseInt(getContents[5]));
            fileDtls.setPart2(Integer.parseInt(getContents[6]));
            fileDtls.setPart3(Integer.parseInt(getContents[7]));
            fileDtls.setPart4(Integer.parseInt(getContents[8]));

            fos1 = new FileOutputStream(f1);
            fos2 = new FileOutputStream(f1);
            fos3 = new FileOutputStream(f1);
            fos4 = new FileOutputStream(f1);
            fos5 = new FileOutputStream(f1);

            rfos1 = new FileOutputStream(f1);
            rfos2 = new FileOutputStream(f1);
            rfos3 = new FileOutputStream(f1);
            rfos4 = new FileOutputStream(f1);
            String url1 = null;
            String url2 = null;
            String url3 = null;
            String url4 = null;

            try {

                Drive service = GetGoogleDriveService.getDriveService();
                GoogleDriveAccess _gda = new GoogleDriveAccess();
                String fileId = null;
                
                fileDtls.setFileOwner(owner_tf.getText().trim());
                fileDtls.setFileName(fileSelected_TF.getText().trim());

                //writing data to cloud server 1
                fos1.write(getContents[0].getBytes());
                //url1 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS1);
                fileId = _gda.uploadFile(service, f1, f1.getName(), constants.Constants.CS1);
                fileDtls.setCs1_url(fileId);
                fos1.close();
                f1.delete();

                //writing data to replica server
                rfos1.write(getContents[0].substring(5).getBytes());
                //fileDtls.setRs1_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS1));
                fileId = _gda.uploadFile(service, f1, f1.getName(), constants.Constants.RS1);
                fileDtls.setRs1_url(fileId);
                rfos1.close();
                f1.delete();

                //writing data to cloud server 2
                fos2.write(getContents[1].getBytes());
                //url2 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS2);
                fileId = _gda.uploadFile(service, f1, f1.getName(), constants.Constants.CS2);
                fileDtls.setCs2_url(fileId);
                fos2.close();
                f1.delete();

                //writing data to replica serer
                rfos2.write(getContents[1].substring(5).getBytes());
                //fileDtls.setRs2_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS2));
                fileId = _gda.uploadFile(service, f1, f1.getName(), constants.Constants.RS2);
                fileDtls.setRs2_url(fileId);
                rfos2.close();
                f1.delete();

                //writing data to cloud server 3
                fos3.write(getContents[2].getBytes());
                try {
                    url3 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS3);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs3_url(url3);
                fos3.close();
                f1.delete();

                //writing data to replia server
                rfos3.write(getContents[2].substring(5).getBytes());
                try {
                    fileDtls.setRs3_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS3));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos3.close();
                f1.delete();

                //writing data to cloud server
                fos4.write(getContents[3].getBytes());
                try {
                    url4 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS4);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs4_url(url4);
                fos4.close();
                f1.delete();

                //writing data to replica server
                rfos4.write(getContents[3].substring(5).getBytes());
                try {
                    fileDtls.setRs4_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS4));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos4.close();
                f1.delete();

                fos5.write(getContents[4].getBytes());
                try {
                    fileDtls.setXor_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.XOR));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fos4.close();
                f1.delete();

                log.addLog("Persisting the file details in Upload page");
                fileDtls.setMode(jComboBox1.getSelectedItem().toString());
                new PersistFileDetails().persistFileDetails(fileDtls);
                log.addLog("File details persisted");

                //Storing the hashing dtls in table for tpa audit
                UserDetails ud = new UserDetailsAccess().getUsrDtls(owner_tf.getText().trim());
                HashDetails hd = new HashDetails();
                hd.setFileName(fileSelected_TF.getText());
                hd.setFileOwner(owner_tf.getText().trim());
                hd.setMailid(ud.getEmailid());
                hd.setHash1_part(new SHA256().hash(getContents[0].getBytes()));
                hd.setHash2_part(new SHA256().hash(getContents[1].getBytes()));
                hd.setHash3_part(new SHA256().hash(getContents[2].getBytes()));
                hd.setHash4_part(new SHA256().hash(getContents[3].getBytes()));
                hd.setHash1_part_url(url1);
                hd.setHash2_part_url(url2);
                hd.setHash3_part_url(url3);
                hd.setHash4_part_url(url4);
               // hd.set
                new PersistHashDtls().persistFileDetails(hd);
                log.addLog("Hash details persisted in the table");

            } catch (IOException ex) {
                log.addLog(ex.getMessage());
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(rootPane, "File Uploaded Successfully:==>" + fileSelected_TF.getText());
        } catch (FileNotFoundException ex) {
            log.addLog(ex.getMessage());
        } finally {
        } 
        }else if(jComboBox1.getSelectedItem().equals(constants.Constants.MODE[1])){
            log.addLog("Uploading the file in the cloud");

        FileOutputStream fos1 = null;
        FileOutputStream fos2 = null;
        FileOutputStream fos3 = null;
        FileOutputStream fos4 = null;
        FileOutputStream fos5 = null;

        FileOutputStream rfos1 = null;
        FileOutputStream rfos2 = null;
        FileOutputStream rfos3 = null;
        FileOutputStream rfos4 = null;
        FileOutputStream rfos5 = null;

        try {

            String[] getContents = new ChunkingFile().chunkFileParts(this.fileSelected);
            log.addLog("File Contents");
            log.addLog(getContents[0]);
            //Uploading file
            File recFile = new File(this.fileSelected.getAbsolutePath());
            //Move file to the temp location
            FileInputStream movStream = new FileInputStream(recFile);
            FileOutputStream movFosStream = new FileOutputStream(constants.Constants.FILE_LOCATION + recFile.getName());
            try {
                byte[] tempByteMove = new byte[movStream.available()];
                movStream.read(tempByteMove);
                movStream.close();
                movFosStream.write(tempByteMove);
                movFosStream.flush();
                movFosStream.close();
                System.out.println("File moved successfully to temporary location");
                
            } catch (IOException ex) {
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }

            File f1 = new File(constants.Constants.FILE_LOCATION + recFile.getName());

            int fileZize = (int) this.fileSelected.length();
            System.out.println("File size=>" + fileZize);

            fileDtls.setFileSize(fileZize);
            fileDtls.setPart1(Integer.parseInt(getContents[5]));
            fileDtls.setPart2(Integer.parseInt(getContents[6]));
            fileDtls.setPart3(Integer.parseInt(getContents[7]));
            fileDtls.setPart4(Integer.parseInt(getContents[8]));

            fos1 = new FileOutputStream(f1);
            fos2 = new FileOutputStream(f1);
            fos3 = new FileOutputStream(f1);
            fos4 = new FileOutputStream(f1);
            fos5 = new FileOutputStream(f1);

            rfos1 = new FileOutputStream(f1);
            rfos2 = new FileOutputStream(f1);
            rfos3 = new FileOutputStream(f1);
            rfos4 = new FileOutputStream(f1);
            String url1 = null;
            String url2 = null;
            String url3 = null;
            String url4 = null;

            try {

                fileDtls.setFileOwner(owner_tf.getText().trim());
                fileDtls.setFileName(fileSelected_TF.getText().trim());

                //writing data to cloud server 1
                fos1.write(getContents[0].getBytes());
                try {
                    url1 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS1);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs1_url(url1);
                fos1.close();
                f1.delete();

                //writing data to replica server
                rfos1.write(getContents[0].substring(5).getBytes());
                try {
                    fileDtls.setRs1_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS1));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos1.close();
                f1.delete();

                //writing data to cloud server 2
                fos2.write(getContents[1].getBytes());
                try {
                    url2 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS2);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs2_url(url2);
                fos2.close();
                f1.delete();

                //writing data to replica serer
                rfos2.write(getContents[1].substring(5).getBytes());
                try {
                    fileDtls.setRs2_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS2));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos2.close();
                f1.delete();

                //writing data to cloud server 3
                fos3.write(getContents[2].getBytes());
                try {
                    url3 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS3);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs3_url(url3);
                fos3.close();
                f1.delete();

                //writing data to replia server
                rfos3.write(getContents[2].substring(5).getBytes());
                try {
                    fileDtls.setRs3_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS3));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                rfos3.close();
                f1.delete();

                //writing data to cloud server
                fos4.write(getContents[3].getBytes());
                try {
                    url4 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS4);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs4_url(url4);
                fos4.close();
                f1.delete();

                //writing data to replica server
                rfos4.write(getContents[3].substring(5).getBytes());
                try {
                    fileDtls.setRs4_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS4));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos4.close();
                f1.delete();

                fos5.write(getContents[4].getBytes());
                try {
                    fileDtls.setXor_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.XOR));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fos4.close();
                f1.delete();

                log.addLog("Persisting the file details in Upload page");
                new PersistFileDetails().persistFileDetails(fileDtls);
                log.addLog("File details persisted");

                //Storing the hashing dtls in table for tpa audit
                UserDetails ud = new UserDetailsAccess().getUsrDtls(owner_tf.getText().trim());
                HashDetails hd = new HashDetails();
                hd.setFileName(fileSelected_TF.getText());
                hd.setFileOwner(owner_tf.getText().trim());
                hd.setMailid(ud.getEmailid());
                hd.setHash1_part(new SHA256().hash(getContents[0].getBytes()));
                hd.setHash2_part(new SHA256().hash(getContents[1].getBytes()));
                hd.setHash3_part(new SHA256().hash(getContents[2].getBytes()));
                hd.setHash4_part(new SHA256().hash(getContents[3].getBytes()));
                hd.setHash1_part_url(url1);
                hd.setHash2_part_url(url2);
                hd.setHash3_part_url(url3);
                hd.setHash4_part_url(url4);
                new PersistHashDtls().persistFileDetails(hd);
                log.addLog("Hash details persisted in the table");

            } catch (IOException ex) {
                log.addLog(ex.getMessage());
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(rootPane, "File Uploaded Successfully:==>" + fileSelected_TF.getText());
        } catch (FileNotFoundException ex) {
            log.addLog(ex.getMessage());
        } finally {
        }
        }else{
            try {
                fileDtls.setFileOwner(owner_tf.getText().trim());
                fileDtls.setFileName(fileSelected_TF.getText().trim());
                String url=null;
                File recFile = new File(this.fileSelected.getAbsolutePath()); 
                 File f1 = new File(constants.Constants.FILE_LOCATION + recFile.getName());
                System.out.println("Path:- "+recFile.getAbsolutePath());
                url = AuthenticateUser.upload(recFile.getAbsolutePath(), constants.Constants.CS1); 
                fileDtls.setCs1_url(url);
                log.addLog("Persisting the file details in Upload page");
                new PersistFileDetails().persistFileDetails(fileDtls);
                log.addLog("File details persisted");
                JOptionPane.showMessageDialog(rootPane, "FileUpload Successfully..!");                
            } catch (DbxException ex) {
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        
        /*     log.addLog("Uploading the file in the cloud");

        FileOutputStream fos1 = null;
        FileOutputStream fos2 = null;
        FileOutputStream fos3 = null;
        FileOutputStream fos4 = null;
        FileOutputStream fos5 = null;

        FileOutputStream rfos1 = null;
        FileOutputStream rfos2 = null;
        FileOutputStream rfos3 = null;
        FileOutputStream rfos4 = null;
        FileOutputStream rfos5 = null;

        try {

            String[] getContents = new ChunkingFile().chunkFileParts(this.fileSelected);
            log.addLog("File Contents");
            log.addLog(getContents[0]);
            //Uploading file
            File recFile = new File(this.fileSelected.getAbsolutePath());
            //Move file to the temp location
            FileInputStream movStream = new FileInputStream(recFile);
            FileOutputStream movFosStream = new FileOutputStream(constants.Constants.FILE_LOCATION + recFile.getName());
            try {
                byte[] tempByteMove = new byte[movStream.available()];
                movStream.read(tempByteMove);
                movStream.close();
                movFosStream.write(tempByteMove);
                movFosStream.flush();
                movFosStream.close();
                System.out.println("File moved successfully to temporary location");
                
            } catch (IOException ex) {
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }

            File f1 = new File(constants.Constants.FILE_LOCATION + recFile.getName());

            int fileZize = (int) this.fileSelected.length();
            System.out.println("File size=>" + fileZize);

            fileDtls.setFileSize(fileZize);
            fileDtls.setPart1(Integer.parseInt(getContents[5]));
            fileDtls.setPart2(Integer.parseInt(getContents[6]));
            fileDtls.setPart3(Integer.parseInt(getContents[7]));
            fileDtls.setPart4(Integer.parseInt(getContents[8]));

            fos1 = new FileOutputStream(f1);
            fos2 = new FileOutputStream(f1);
            fos3 = new FileOutputStream(f1);
            fos4 = new FileOutputStream(f1);
            fos5 = new FileOutputStream(f1);

            rfos1 = new FileOutputStream(f1);
            rfos2 = new FileOutputStream(f1);
            rfos3 = new FileOutputStream(f1);
            rfos4 = new FileOutputStream(f1);
            String url1 = null;
            String url2 = null;
            String url3 = null;
            String url4 = null;

            try {

                fileDtls.setFileOwner(owner_tf.getText().trim());
                fileDtls.setFileName(fileSelected_TF.getText().trim());

                //writing data to cloud server 1
                fos1.write(getContents[0].getBytes());
                try {
                    url1 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS1);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs1_url(url1);
                fos1.close();
                f1.delete();

                //writing data to replica server
                rfos1.write(getContents[0].substring(5).getBytes());
                try {
                    fileDtls.setRs1_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS1));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos1.close();
                f1.delete();

                //writing data to cloud server 2
                fos2.write(getContents[1].getBytes());
                try {
                    url2 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS2);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs2_url(url2);
                fos2.close();
                f1.delete();

                //writing data to replica serer
                rfos2.write(getContents[1].substring(5).getBytes());
                try {
                    fileDtls.setRs2_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS2));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos2.close();
                f1.delete();

                //writing data to cloud server 3
                fos3.write(getContents[2].getBytes());
                try {
                    url3 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS3);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs3_url(url3);
                fos3.close();
                f1.delete();

                //writing data to replia server
                rfos3.write(getContents[2].substring(5).getBytes());
                try {
                    fileDtls.setRs3_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS3));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                rfos3.close();
                f1.delete();

                //writing data to cloud server
                fos4.write(getContents[3].getBytes());
                try {
                    url4 = AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.CS4);
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileDtls.setCs4_url(url4);
                fos4.close();
                f1.delete();

                //writing data to replica server
                rfos4.write(getContents[3].substring(5).getBytes());
                try {
                    fileDtls.setRs4_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.RS4));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                rfos4.close();
                f1.delete();

                fos5.write(getContents[4].getBytes());
                try {
                    fileDtls.setXor_url(AuthenticateUser.upload(f1.getAbsolutePath(), constants.Constants.XOR));
                } catch (DbxException ex) {
                    Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
                fos4.close();
                f1.delete();

                log.addLog("Persisting the file details in Upload page");
                new PersistFileDetails().persistFileDetails(fileDtls);
                log.addLog("File details persisted");

                //Storing the hashing dtls in table for tpa audit
                UserDetails ud = new UserDetailsAccess().getUsrDtls(owner_tf.getText().trim());
                HashDetails hd = new HashDetails();
                hd.setFileName(fileSelected_TF.getText());
                hd.setFileOwner(owner_tf.getText().trim());
                hd.setMailid(ud.getEmailid());
                hd.setHash1_part(new SHA256().hash(getContents[0].getBytes()));
                hd.setHash2_part(new SHA256().hash(getContents[1].getBytes()));
                hd.setHash3_part(new SHA256().hash(getContents[2].getBytes()));
                hd.setHash4_part(new SHA256().hash(getContents[3].getBytes()));
                hd.setHash1_part_url(url1);
                hd.setHash2_part_url(url2);
                hd.setHash3_part_url(url3);
                hd.setHash4_part_url(url4);
                new PersistHashDtls().persistFileDetails(hd);
                log.addLog("Hash details persisted in the table");

            } catch (IOException ex) {
                log.addLog(ex.getMessage());
                Logger.getLogger(UploadPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(rootPane, "File Uploaded Successfully:==>" + fileSelected_TF.getText());
        } catch (FileNotFoundException ex) {
            log.addLog(ex.getMessage());
        } finally {
        }*/
    }//GEN-LAST:event_upload_btActionPerformed

    public void clearFields() {
        fileSelected_TF.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public void main(final String uname) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadPage(uname).setVisible(true);
            }
        });
    }

    private String getUserName() {
        return owner_tf.getText().trim();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton exit_bt;
    private javax.swing.JTextField fileSelected_TF;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField owner_tf;
    private javax.swing.JButton upload_bt;
    // End of variables declaration//GEN-END:variables
}
