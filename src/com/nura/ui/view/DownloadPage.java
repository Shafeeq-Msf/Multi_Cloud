/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nura.ui.view;

import com.dropbox.core.DbxException;
import com.google.api.services.drive.Drive;
import com.hadoopanalyzer.HadoopAnalyzer;
import com.nura.cloud.GoogleDriveAccessDownload;
import com.nura.db.access.FileDetailsHandler;
import com.nura.db.entity.FileDetails;
import com.nura.dropbox.AuthenticateUser;
import com.nura.filehandling.BinaryToString;
import com.nura.filehandling.MergeFile;
import com.nura.filehandling.StringReader;
import com.nura.filehandling.XOR;
import com.nura.security.Decrypt;
import constants.Constants;
import googleauthenticate.GetGoogleDriveService;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logger.LoggerUtil;

/**
 *
 * @author Arun Kumar
 */
public class DownloadPage extends javax.swing.JFrame {

    private static final LoggerUtil log = new LoggerUtil();
    private String userName;

    /**
     * Creates new form DownloadPage
     */
    public DownloadPage() {
    }

    public DownloadPage(String userName) {
        initComponents();
        this.userName = userName;
        userName_tf.setText(userName);
        userName_tf.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        userName_tf = new javax.swing.JTextField();
        fileName_tf = new javax.swing.JTextField();
        download_bt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        exit_bt = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userName_tf.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        fileName_tf.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        download_bt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        download_bt.setText("Download");
        download_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                download_btActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("User Name:-");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("File Name:-");

        exit_bt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        exit_bt.setText("Exit");
        exit_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_btActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Mode:-");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(constants.Constants.MODE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(download_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userName_tf)
                    .addComponent(fileName_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(exit_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(userName_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileName_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(download_bt, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(exit_bt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(101, 101, 101))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void download_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_download_btActionPerformed
        try {
//            new HadoopAnalyzer().processFiles(new java.io.File(constants.Constants.FILE_HADOOP_IN_LOC));
            if(jComboBox1.getSelectedItem().toString().equals(constants.Constants.MODE[0])){
                try {
                    
                    // TODO add your handling code here:
                    log.addLog("Download button pressed:-");
                    FileDetails fileDtls = new FileDetailsHandler().getFileDetails(fileName_tf.getText().trim());
                    int fileSize = fileDtls.getFileSize();
                    int part1_size = fileDtls.getPart1();
                    int part2_size = fileDtls.getPart2();
                    int part3_size = fileDtls.getPart3();
                    int part4_size = fileDtls.getPart4();
                    
                    System.out.println("File size:-" + fileSize);
                    log.addLog("Performing the download operation");
                    byte[] part1 = null, part2 = null, part3 = null, part4 = null;
                    File file = null;
                    String getContents = "";
                    //Getting part1 data
                    //file = AuthenticateUser.download(Constants.CS1, fileName_tf.getText().trim());
                    GoogleDriveAccessDownload _gdaDownload = new GoogleDriveAccessDownload();
                    Drive service = GetGoogleDriveService.getDriveService();
                    try {
                        file = _gdaDownload.downloadFile(service, fileDtls.getCs1_url(), fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    } catch (IOException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        System.out.println(ex.getLocalizedMessage());
                    }
                    
                    if (getContents.length() > 5) { //Downloading the file from cloud server
                        getContents = getContents.substring(5);
                        JOptionPane.showMessageDialog(this, "File Downloaded from Cloud Server 1");
                    } else { //Downloading from replica server
                        //file = AuthenticateUser.download(Constants.RS1, fileName_tf.getText().trim());
                        try {
                            file = _gdaDownload.downloadFile(service, fileDtls.getRs1_url(), fileName_tf.getText().trim());
                            getContents = StringReader.readFile(file);
                            if (getContents.length() > 5) {
                                JOptionPane.showMessageDialog(this, "File Downloaded from Replica Server 1");
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            System.out.println(ex.getLocalizedMessage());
                        }
                        
                    }
                    BinaryToString bs = new BinaryToString();
                    String orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part1 = Decrypt.main(orgForm);

                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    //Getting part2 data
                    //file = AuthenticateUser.download(Constants.CS2, fileName_tf.getText().trim());
                    try {
                        file = _gdaDownload.downloadFile(service, fileDtls.getCs2_url(), fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    } catch (IOException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        System.out.println(ex.getLocalizedMessage());
                    }
                    
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                        JOptionPane.showMessageDialog(this, "File Downloaded from Cloud Server 2");
                    } else { //Downloading from replica server
                        //file = AuthenticateUser.download(Constants.RS2, fileName_tf.getText().trim());
                        try {
                            file = _gdaDownload.downloadFile(service, fileDtls.getCs1_url(), fileName_tf.getText().trim());
                            getContents = StringReader.readFile(file);
                            if (getContents.length() > 5) {
                                JOptionPane.showMessageDialog(this, "File Downloaded from Replica Server 2");
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            System.out.println(ex.getLocalizedMessage());
                        }
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part2 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }

                    try {
                        //Getting part3`````````````````````````
                        file = AuthenticateUser.download(Constants.CS3, fileName_tf.getText().trim());
                    } catch (DbxException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    getContents = StringReader.readFile(file);
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                        JOptionPane.showMessageDialog(this, "File Downloaded from Cloud Server 3");
                    } else { try {
                        //Downloading from replica server
                        file = AuthenticateUser.download(Constants.RS3, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                        if (getContents.length() > 5) {
                            JOptionPane.showMessageDialog(this, "File Downloaded from Replica Server 3");            }
                    } catch (DbxException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                        
                    }
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part3 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    //Getting part 4
                    file = AuthenticateUser.download(Constants.CS4, fileName_tf.getText().trim());
                    getContents = StringReader.readFile(file);
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                        JOptionPane.showMessageDialog(this, "File Downloaded from Cloud Server 4");
                    } else {
                        file = AuthenticateUser.download(Constants.RS4, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                        if (getContents.length() > 5) {
                            JOptionPane.showMessageDialog(this, "File Downloaded from Replica Server 4");
                        }
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part4 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    
                    //multiple failure marker
                    failure:
                    {
                        //Check for multiple cloud failures
                        int counter = 0;
                        
                        //Perform the xor operation if error occurs
                        if (part1.length == 0) {
                            ++counter;
                            try {
                                System.out.println("Inside the failure block");
                                file = AuthenticateUser.download("XOR Server", fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                // getContents = getContents.substring(4);
                                orgForm = bs.getBinaryToString(getContents);
                                part1 = Decrypt.main(orgForm);
                                part1 = XOR.recovery(part2, part3, part4, part1, 1);
                                JOptionPane.showMessageDialog(this, "Part 1 is corrupted");
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                            
                        } else if (part2.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download(Constants.XOR, fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part2 = Decrypt.main(orgForm);
                                part2 = XOR.recovery(part1, part3, part4, part2, 2);
                                JOptionPane.showMessageDialog(this, "Part 2 is corrupted");
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        } else if (part3.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download(Constants.XOR, fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part3 = Decrypt.main(orgForm);
                                
                                part3 = XOR.recovery(part1, part2, part4, part3, 3);
                                JOptionPane.showMessageDialog(this, "Part 3 is corrupted");
                                
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        } else if (part4.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download("XOR Server", fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part4 = Decrypt.main(orgForm);
                                part4 = XOR.recovery(part1, part2, part3, part4, 4);
                                JOptionPane.showMessageDialog(this, "Part 4 is corrupted");
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        }
                        boolean xorRec = false;
                        if (counter > 0) {
                            xorRec = true;
                        }
                        //Merging the Entire file after downloading
                        new MergeFile().mergeBytes(part1, part2, part3, part4, fileSize, fileName_tf.getText(),
                                xorRec, part1_size, part2_size, part3_size, part4_size);
                        JOptionPane.showMessageDialog(rootPane, "File Downloaded Successfully==>" + fileName_tf.getText());
                        try {
                            Desktop.getDesktop().open(new File(Constants.FILE_LOCATION, fileName_tf.getText()));
                        } catch (IOException ex) {
                            Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }//End of block with label failure
                    log.addLog("File dowlnoad completed");
                } catch (DbxException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(jComboBox1.getSelectedItem().toString().equals(constants.Constants.MODE[1])){
                try {
                    log.addLog("Download button pressed:-");
                    FileDetails fileDtls = new FileDetailsHandler().getFileDetails(fileName_tf.getText().trim());
                    int fileSize = fileDtls.getFileSize();
                    int part1_size = fileDtls.getPart1();
                    int part2_size = fileDtls.getPart2();
                    int part3_size = fileDtls.getPart3();
                    int part4_size = fileDtls.getPart4();
                    
                    System.out.println("File size:-" + fileSize);
                    log.addLog("Performing the download operation");
                    byte[] part1 = null, part2 = null, part3 = null, part4 = null;
                    File file;
                    
                    //Getting part1 data
                    file = AuthenticateUser.download(Constants.CS1, fileName_tf.getText().trim());
                    String getContents = "";
                    getContents = StringReader.readFile(file);
                    
                    if (getContents.length() > 5) { //Downloading the file from cloud server
                        getContents = getContents.substring(5);
                    } else { //Downloading from replica server
                        file = AuthenticateUser.download(Constants.RS1, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    }
                    BinaryToString bs = new BinaryToString();
                    String orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part1 = Decrypt.main(orgForm);
                        
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    //Getting part2 data
                    file = AuthenticateUser.download(Constants.CS2, fileName_tf.getText().trim());
                    getContents = StringReader.readFile(file);
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                    } else { //Downloading from replica server
                        file = AuthenticateUser.download(Constants.RS2, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part2 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    
                    //Getting part3`````````````````````````
                    file = AuthenticateUser.download(Constants.CS3, fileName_tf.getText().trim());
                    getContents = StringReader.readFile(file);
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                    } else { //Downloading from replica server
                        file = AuthenticateUser.download(Constants.RS3, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part3 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    //Getting part 4
                    file = AuthenticateUser.download(Constants.CS4, fileName_tf.getText().trim());
                    getContents = StringReader.readFile(file);
                    if (getContents.length() > 5) {
                        getContents = getContents.substring(5);
                    } else {
                        file = AuthenticateUser.download(Constants.RS4, fileName_tf.getText().trim());
                        getContents = StringReader.readFile(file);
                    }
                    orgForm = null;
                    try {
                        orgForm = bs.getBinaryToString(getContents);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    try {
                        part4 = Decrypt.main(orgForm);
                    } catch (Exception ex) {
                        log.addLog(ex.getMessage());
                    }
                    
                    //multiple failure marker
                    failure:
                    {
                        //Check for multiple cloud failures
                        int counter = 0;
                        
                        //Perform the xor operation if error occurs
                        if (part1.length == 0) {
                            ++counter;
                            try {
                                System.out.println("Inside the failure block");
                                file = AuthenticateUser.download("XOR Server", fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                // getContents = getContents.substring(4);
                                orgForm = bs.getBinaryToString(getContents);
                                part1 = Decrypt.main(orgForm);
                                
                                part1 = XOR.recovery(part2, part3, part4, part1, 1);
                                
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                            
                        } else if (part2.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download(Constants.XOR, fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part2 = Decrypt.main(orgForm);
                                part2 = XOR.recovery(part1, part3, part4, part2, 2);
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        } else if (part3.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download(Constants.XOR, fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part3 = Decrypt.main(orgForm);
                                
                                part3 = XOR.recovery(part1, part2, part4, part3, 3);
                                
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        } else if (part4.length == 0) {
                            if (counter > 0) {
                                JOptionPane.showMessageDialog(null, "Mulitple cloud failure");
                                break failure;
                            } else {
                                ++counter;
                            }
                            try {
                                file = AuthenticateUser.download("XOR Server", fileName_tf.getText().trim());
                                getContents = StringReader.readFile(file);
                                orgForm = bs.getBinaryToString(getContents);
                                part4 = Decrypt.main(orgForm);
                                part4 = XOR.recovery(part1, part2, part3, part4, 4);
                            } catch (Exception ex) {
                                log.addLog(ex.getMessage());
                            }
                        }
                        boolean xorRec = false;
                        if (counter > 0) {
                            xorRec = true;
                        }
                        //Merging the Entire file after downloading
                        new MergeFile().mergeBytes(part1, part2, part3, part4, fileSize, fileName_tf.getText(),
                                xorRec, part1_size, part2_size, part3_size, part4_size);
                        JOptionPane.showMessageDialog(rootPane, "File Downloaded Successfully==>"+fileName_tf.getText());
                        try {
                            Desktop.getDesktop().open(new File(Constants.FILE_LOCATION, fileName_tf.getText()));
                        } catch (IOException ex) {
                            Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }//End of block with label failure
                    log.addLog("File dowlnoad completed");
                } catch (DbxException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                }  catch (IOException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                try {
                    File file;
                    
                    //Getting part1 data
                    file = AuthenticateUser.download(Constants.CS1, fileName_tf.getText().trim());
                    
                    JOptionPane.showMessageDialog(rootPane, "File Downloaded Successfully==>"+fileName_tf.getText());
                    System.out.println("Download Path"+file.getAbsolutePath());
                    
                    try {
                        Desktop.getDesktop().open(new File(Constants.SINGLE_FILE, fileName_tf.getText()));
                    } catch (IOException ex) {
                        Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (DbxException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }} catch (Exception ex) {
            Logger.getLogger(DownloadPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_download_btActionPerformed

    private void exit_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_btActionPerformed
        // TODO add your handling code here:
        dispose();
        new UserLogin().main();
    }//GEN-LAST:event_exit_btActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(final String uname) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                log.addLog("Download page started");
                new DownloadPage(uname).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton download_bt;
    private javax.swing.JButton exit_bt;
    private javax.swing.JTextField fileName_tf;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField userName_tf;
    // End of variables declaration//GEN-END:variables
}
